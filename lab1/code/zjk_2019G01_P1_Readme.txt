For better reading experience, please open the file with a markdown reader.

# How to run
## Compile and run zjk_2019G01_P1_Test.c.(make sure the file zjk_2019G01_P1_Algo_Implementation.c is in your complier's search dir. Or you just put it in the same folder with zjk_2019G01_P1_Test.c)
The sample executable file in the folder is complied with clang with args: -Ofast -Wall
Complier output:
```bash
zjk_2019G01_P1_Test.c:37:10: warning: 'fopen' is deprecated: This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help
      for details. [-Wdeprecated-declarations]
    fp = fopen("testResult.md", "w"); //set the relative path and the file mode in "w" so that the old data can be deleted
         ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h:207:20: note: 'fopen' has been explicitly marked deprecated here
    _Check_return_ _CRT_INSECURE_DEPRECATE(fopen_s)
                   ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.22.27905\include\vcruntime.h:297:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.22.27905\include\vcruntime.h:287:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
```
Executable output
```
1.10517
1.64868
2.71815
7.38832
54.5872
403.308
2979.77
22015.5
1.10517
1.64868
2.71815
7.38832
54.5872
403.308
2979.77
22015.5
1.10517
1.64868
2.71815
7.38832
54.5872
403.308
2979.77
22015.5
1.10517
1.64868
2.71815
7.38832
54.5872
403.308
2979.77
22015.5
```

## The sample output is the output generated by the sample executable file.

# Reading Sequence

zjk_2019G01_P1_Algo_Implementation.c is the implementation of the three(four) power algorithms

zjk_2019G01_P1_Test.c is where the main function lies. It generates testResult.md for the algorithms mentioned above.

zjk_2019G01_P1_Readme.txt is this file you're currently reading.

The origin of test result files can be easily identified by their file name, among which the sample test result file is what the sample executable generates(so that it can be called clang x64 release test result)